using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TrainingTracker.BLL.Base;
using TrainingTracker.Common.Entity;
using TrainingTracker.Common.Utility;
using TrainingTracker.Common.ViewModel;

namespace TrainingTracker.BLL
{
    /// <summary>
    /// instnce class for Survey bussiness layer
    /// </summary>
    public class SurveyBl:BussinessBase
    {
        /// <summary>
        /// Bussiness method to Fecth weekly survey Questions for team
        /// </summary>
        ///  <param name="traineeId">trainee id</param>
        /// <param name="startDate">feedback start Date</param>
        /// <param name="endDate">feedback end date</param>
        /// <param name="teamId">team id</param>
        /// <returns>Instance of survey id</returns>
        public SurveyVm FetchWeeklySurveyQuestionForTeam( int traineeId , DateTime startDate , DateTime endDate , int teamId )
        {
            return new SurveyVm()
             {
                 Survey  =  SurveyDataAccesor.GetWeeklySurveySetForTeam(teamId),
                 IsCodeReviewedForTrainee = FeedbackDataAccesor.GetUserFeedback(traineeId , 
                                                                                1000 , 
                                                                                (int) Common.Enumeration.FeedbackType.CodeReview).Any(x => x.AddedOn.Date >= startDate.Date 
                                                                                                                                         && x.EndDate.Date <= endDate.Date)
             };
        }

        /// <summary>
        /// Save weekly feedback and corresponding survey response
        /// </summary>
        /// <param name="response">instance of response</param>
        /// <returns>success flag </returns>
        public bool SaveWeeklySurveyResponseForTrainee(SurveyResponse response)
        {
            // Weekly feedback must have team associated with it.
            if (!response.AddedBy.TeamId.HasValue) return false;

            try
            {
                Survey survey = SurveyDataAccesor.GetWeeklySurveySetForTeam(response.AddedBy.TeamId.Value);
                response.CodeReviewForTheWeek = FeedbackDataAccesor.GetUserFeedback(response.AddedFor.UserId,
                                                                                    1000,
                                                                                    (int) Common.Enumeration.FeedbackType.CodeReview)
                                                                    .Where(x => x.AddedOn.Date >=response.Feedback.StartDate
                                                                                && x.EndDate.Date <= response.Feedback.EndDate)
                                                                    .ToList();

                response.Feedback.FeedbackText = GenerateHtmlforFeedback(response , survey);              
                response.Feedback.FeedbackId = SurveyDataAccesor.SaveWeeklySurveyResponseForTrainee(response, survey);
                return response.Feedback.FeedbackId > 0 && new NotificationBl().AddFeedbackNotification(response.Feedback);
            }
            catch (Exception ex)
            {
                LogUtility.ErrorRoutine(ex);
                return false;
            }        
        }

        /// <summary>
        /// Fetch Weekly feedback preview generated by survey
        /// </summary>
        /// <param name="response">instance of response</param>
        /// <returns>generated Html</returns>
        public string FetchWeeklyFeedbackPreview(SurveyResponse response)
        {
            // Weekly feedback must have team associated with it.
            if (!response.AddedBy.TeamId.HasValue) return string.Empty;

            Survey survey = SurveyDataAccesor.GetWeeklySurveySetForTeam(response.AddedBy.TeamId.Value);
            response.CodeReviewForTheWeek = FeedbackDataAccesor.GetUserFeedback(response.AddedFor.UserId ,
                                                                                   1000 ,
                                                                                   (int) Common.Enumeration.FeedbackType.CodeReview)
                                                                   .Where(x => x.AddedOn.Date >= response.Feedback.StartDate
                                                                               && x.EndDate.Date <= response.Feedback.EndDate)
                                                                   .ToList();
            return GenerateHtmlforFeedback(response , survey);
        }

        /// <summary>
        /// Private method that generates survey html on survey response and survey set
        /// </summary>
        /// <param name="response">response collected</param>
        /// <param name="survey">orignal question set</param>
        /// <returns>html string</returns>
        private string GenerateHtmlforFeedback(SurveyResponse response,Survey survey)
        {
           
            SurveyQuestion question=new SurveyQuestion();
            
                foreach (ResponseMapping surveyReponse in response.Response)
                {
                    var questionSet = survey.SurveySubSections.First(x => x.Questions.Any(y => y.SurveyQuestionId == surveyReponse.QuestionId))
                                                              .Questions
                                                              .First(x => x.SurveyQuestionId == surveyReponse.QuestionId);

                    surveyReponse.QuestionText = questionSet.QuestionText;
                    var answer = questionSet.Answers.FirstOrDefault(x => x.Id == surveyReponse.AnswerId);

                    if (answer != null) surveyReponse.AnswerText = answer.OptionText;
                }

            return UtilityFunctions.GenerateHtmlForFeedbackOnSurveyResponse(response);
        }
    }
}
